"""
Django settings for activity_logger project.

Generated by 'django-admin startproject' using Django 4.2.10.
"""

from pathlib import Path

import os
import environ

from celery.schedules import crontab

from typing import Any, Dict, Tuple


celery_task_limit_seconds = 30 * 60
celery_task_limit_soft_seconds = 25 * 60

# Requeue task runs every:
requeue_pending_minutes = 5
# Requeue task expires after:
requeue_expire_minutes = 4


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environment variables
env = environ.Env()
env_dir = os.path.join(BASE_DIR, '.env')
environ.Env.read_env(env_dir)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure-xj^bi5%is+6v@mv++edtyo9@!^k1%m(uow&7)a2er7i9ms8#=t')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True)
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])


# Application definition -- all applications that are enabled in this project

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'constance',

    'django_celery_results',
    'django_prometheus',
    # Add core application
    'core',

    'realtime_config',
]

MIDDLEWARE = [
    'realtime_config.middleware.LogRequestPIDMiddleware',
    
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'activity_logger.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'activity_logger.wsgi.application'


# Database

DEFAULT_DB_URL = f"postgres://{env('DATABASE_USER', default='postgres')}:{env('DATABASE_PASSWORD', default='postgres')}@{env('DATABASE_HOST', default='db')}:{env('DATABASE_PORT', default='5432')}/{env('DATABASE_NAME', default='activity_db')}"
# Reads DATABASE_URL env var, falls back to constructing from parts
DATABASES = {
    'default': env.db_url('DATABASE_URL', default=DEFAULT_DB_URL)
}


# Celery settings

CELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://redis:6379/0')
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://redis:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

CELERY_RESULT_SERIALIZER = 'json'

# If storing task results in Django
# CELERY_RESULT_BACKEND = 'django-db'
CELERY_TASK_TIME_LIMIT = celery_task_limit_seconds
CELERY_TASK_SOFT_TIME_LIMIT = celery_task_limit_soft_seconds

CELERY_TASK_ROUTES = {
    'core.tasks.process_activity': {'queue': 'activities'},
}

CELERY_BEAT_SCHEDULE = {
    'requeue-pending-activities': {
        'task': 'core.tasks.requeue_pending_activities',
        'schedule': crontab(minute='*/' + str(requeue_pending_minutes)),
        'options': {
            'queue': 'activities',
            'expires': 60 * requeue_expire_minutes,
        },
    },
}


# Constance settings - - - define realtime configs here!

CONSTANCE_BACKEND: str = 'constance.backends.redisd.RedisBackend'

_base_redis_url = CELERY_BROKER_URL.rsplit('/', 1)[0]
_constance_redis_db = env.int('CONSTANCE_REDIS_DB', default=1)
#CONSTANCE_REDIS_CONNECTION = f"{_base_redis_url}/{_constance_redis_db}"

CONSTANCE_REDIS_CONNECTION = {
    'host': 'redis',
    'port': 6379,
    'db': env.int('CONSTANCE_REDIS_DB', default=1),
}

CONSTANCE_CONFIG: Dict[str, Tuple[Any, str, type]] = {
    # 'CONFIG_NAME': (default, 'description', config type)
    
    # MET values to calculate calories
    'MET_RUN': (9.0, 'MET value for running', float),
    'MET_WALK': (3.5, 'MET value for walking', float),
    'MET_CYCLE': (8.0, 'MET value for cycling', float),
    'MET_SWIM': (6.5, 'MET value for swimming', float),
    'MET_YOGA': (4.0, 'MET value for yoga', float),

    'DEFAULT_WEIGHT': (70.0, 'Default weight in kg', float),
    
    'ACTIVITIES_PER_PAGE': (10, 'Activities per page in list view', int),
    'ACTIVITY_POLLING_S': (2.0, 'Polling interval for activity app, s', float),
    
    'TASK_PROCESSING_DELAY_S': (5.0, 'Artificial delay in task processing, s', float),

    # Configs for realtime config view
    'SITE_NAME': ('Config Manager', 'Site name', str),
    'WELCOME_MESSAGE': ('You can see real-time configs and their values here', 'Welcome text', str),
    'THEME_COLOR': ('#4a6cf7', 'Background theme colour in HEX', str),
    'MAINTENANCE_MODE': (False, 'Maintenance mode', bool),
    'ITEMS_PER_PAGE': (5, 'Config items per page', int),

    'SHOW_LOGS': (True, 'Show change logs', bool),
    'LOGS_COUNT': (10, 'Number of recent change logs to show', int),

    'UI_POLLING_INTERVAL': (300.0, 'Polling interval for real-time UI, s', float),
}

# Any config you add must appear here in some fieldset! also definable
CONSTANCE_CONFIG_FIELDSETS: Dict[str, Tuple[str, ...]] = {
    'Activity MET Values': ('MET_RUN', 'MET_WALK', 'MET_CYCLE', 'MET_SWIM', 'MET_YOGA'),
    'User Default': ('DEFAULT_WEIGHT',),
    'UI': ('ACTIVITIES_PER_PAGE', 'ACTIVITY_POLLING_S'),
    'Demo Task Processing': ('TASK_PROCESSING_DELAY_S',),

    'General': ('SITE_NAME', 'THEME_COLOR', 'MAINTENANCE_MODE'),
    'Content': ('WELCOME_MESSAGE', 'ITEMS_PER_PAGE'),
    'Logging': ('SHOW_LOGS', 'LOGS_COUNT'),
    'Demo': ('UI_POLLING_INTERVAL',)
}

REDIS_PUB_SUB_CHANNEL: str = 'realtime_config_updates'

# Time to wait for before trying to connect to Redis again
REDIS_RETRY_INTERVAL: float = 10.0


# Logging

LOGGING: Dict[str, Any] = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {name}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'celery': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'realtime_config': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


# Password validation

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)

STATIC_URL = 'static/'


# Default primary key field type

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CELERY_TIMEZONE = TIME_ZONE
