"""
Django settings for activity_logger project.

Generated by 'django-admin startproject' using Django 4.2.10.
"""

from pathlib import Path

import os
import environ

from celery.schedules import crontab


celery_task_limit_seconds = 30 * 60
celery_task_limit_soft_seconds = 25 * 60

# Requeue task runs every:
requeue_pending_minutes = 5
# Requeue task expires after:
requeue_expire_minutes = 4


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environment variables
env = environ.Env()
env_dir = os.path.join(BASE_DIR, '.env')
environ.Env.read_env(env_dir)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure-xj^bi5%is+6v@mv++edtyo9@!^k1%m(uow&7)a2er7i9ms8#=t')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True)
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])


# Application definition -- all applications that are enabled in this project

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_celery_results',
    'django_prometheus',
    # Add core application
    'core',
]

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'activity_logger.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'activity_logger.wsgi.application'


# Database

DEFAULT_DB_URL = f"postgres://{env('DATABASE_USER', default='postgres')}:{env('DATABASE_PASSWORD', default='postgres')}@{env('DATABASE_HOST', default='db')}:{env('DATABASE_PORT', default='5432')}/{env('DATABASE_NAME', default='activity_db')}"
# Reads DATABASE_URL env var, falls back to constructing from parts
DATABASES = {
    'default': env.db_url('DATABASE_URL', default=DEFAULT_DB_URL)
}


# Password validation

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)

STATIC_URL = 'static/'


# Default primary key field type

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Celery conf

CELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://redis:6379/0')
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://redis:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

CELERY_RESULT_SERIALIZER = 'json'

# If storing task results in Django
# CELERY_RESULT_BACKEND = 'django-db'
CELERY_TASK_TIME_LIMIT = celery_task_limit_seconds
CELERY_TASK_SOFT_TIME_LIMIT = celery_task_limit_soft_seconds

CELERY_TASK_ROUTES = {
    'core.tasks.process_activity': {'queue': 'activities'},
}

CELERY_BEAT_SCHEDULE = {
    'requeue-pending-activities': {
        'task': 'core.tasks.requeue_pending_activities',
        'schedule': crontab(minute='*/' + str(requeue_pending_minutes)),
        'options': {
            'queue': 'activities',
            'expires': 60 * requeue_expire_minutes,
        },
    },
}
